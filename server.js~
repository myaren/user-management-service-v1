const request = require('supertest');
const fastify = require('fastify')();
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

// Define User Schema
const userSchema = new mongoose.Schema({
    _id: { type: String, default: uuidv4 },
    name: { type: String, required: true },
    age: { type: Number, required: true },
    email: { type: String, required: true, unique: true }
});

const User = mongoose.model('User', userSchema);

// Routes
fastify.post('/users', async (request, reply) => {
    const { name, age, email } = request.body;
    try {
        const user = new User({ name, age, email });
        await user.save();
        return { message: 'User created', user };
    } catch (err) {
        if (err.code === 11000) {
            return reply.status(400).send({ message: 'Email already exists' });
        }
        throw err;
    }
});

fastify.get('/users', async (request, reply) => {
    const { name, age } = request.query;
    const filter = {};
    if (name) filter.name = new RegExp(name, 'i');
    if (age) filter.age = age;
    const users = await User.find(filter);
    return users;
});

// Start server before tests
beforeAll(async () => {
    await fastify.listen({ port: 3000, host: '0.0.0.0' });
});

// Close server after tests
afterAll(async () => {
    await fastify.close();
});

